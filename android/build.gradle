import java.nio.file.Paths

buildscript {
  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['ReactNativeWebView_' + name]
  }

  repositories {
    mavenCentral()
  }

  dependencies {
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}")
  }
}

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

static def findNodeModulePath(baseDir, packageName) {
    def basePath = baseDir.toPath().normalize()
    // Node's module resolution algorithm searches up to the root directory,
    // after which the base path will be null
    while (basePath) {
        def candidatePath = Paths.get(basePath.toString(), "node_modules", packageName)
        if (candidatePath.toFile().exists()) {
            return candidatePath.toString()
        }
        basePath = basePath.getParent()
    }
    return null
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties['ReactNativeWebView_' + name]).toInteger()
}

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
  compileSdkVersion getExtOrIntegerDefault('compileSdkVersion')

  // Used to override the NDK path/version on internal CI or by allowing
  // users to customize the NDK path/version from their root project (e.g. for M1 support)
  if (rootProject.hasProperty("ndkPath")) {
      ndkPath rootProject.ext.ndkPath
  }
  if (rootProject.hasProperty("ndkVersion")) {
      ndkVersion rootProject.ext.ndkVersion
  }
  var appProject2 = rootProject.allprojects.find {it.plugins.hasPlugin('com.android.application')}

  println "REACT_ANDROID_DIR=${findNodeModulePath(appProject2.rootDir, "react-native") ?: "../node_modules/react-native/"}/ReactAndroid"

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault('minSdkVersion')
    targetSdkVersion getExtOrIntegerDefault('targetSdkVersion')
    versionCode 1
    versionName "1.0"
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    if (isNewArchitectureEnabled()) {
      var appProject = rootProject.allprojects.find {it.plugins.hasPlugin('com.android.application')}
      externalNativeBuild {
        ndkBuild {
          arguments "APP_PLATFORM=android-21",
            "APP_STL=c++_shared",
            "NDK_TOOLCHAIN_VERSION=clang",
            "GENERATED_SRC_DIR=${appProject.buildDir}/generated/source",
            "PROJECT_BUILD_DIR=${appProject.buildDir}",
            "REACT_ANDROID_DIR=${findNodeModulePath(appProject.rootDir, "react-native") ?: "../node_modules/react-native/"}/ReactAndroid",
            "REACT_ANDROID_BUILD_DIR=${findNodeModulePath(appProject.rootDir, "react-native") ?: "../node_modules/react-native/"}/ReactAndroid/build"
            cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
          cppFlags "-std=c++17"
          targets "reactnativewebview_modules"
        }
      }
    }
  }
  
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  if (isNewArchitectureEnabled()) {
    externalNativeBuild {
      ndkBuild {
        path "src/main/jni/Android.mk"
      }
    }
  }
}

repositories {
  mavenCentral()
}

def kotlin_version = getExtOrDefault('kotlinVersion')
def webkit_version = getExtOrDefault('webkitVersion')

dependencies {
  if (isNewArchitectureEnabled()) {
    implementation project(":ReactAndroid")
  } else {
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'
  }
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  implementation "androidx.webkit:webkit:$webkit_version"
}


if (isNewArchitectureEnabled()) {
  react {
    libraryName = "reactnativewebview"
    codegenJavaPackageName = "com.reactnativecommunity.webview"
    jsRootDir = file('../src/fabric')
    reactNativeDir = rootProject.file(findNodeModulePath(rootProject.rootDir, "react-native") ?: "../node_modules/react-native/")
    codegenDir = rootProject.file(findNodeModulePath(rootProject.rootDir, "react-native-codegen") ?: "../node_modules/react-native-codegen/")
  }
}
